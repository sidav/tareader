00 10 00 10	Move object
		This will cause an object to move a distance on an axis.
		Stack:		<Speed>		Stack:		<Empty>
				<Distance>
		Post Data:	<Object #>
				<Axis #>
00 10 01 10	Wait-for-turn
		A call to this will wait for an object to finish turning.
		Stack:		<Empty>		Stack: 		<Empty>
		Post Data:	<Object #>
				<Axis #>
00 10 04 10	Random Number
		A call to this function will return a random integer in the range of high and low.
		Pre-condition:	Low boundary is placed on stack, and then the High boundary is placed on
		stack.
		Post-condition:	The stack contains the random number.
00 10 05 10	VAL1  <   VAL2
		A call to this function will do a less than compare with the two values on the stack
		Pre-condition:	VAL1 is placed on stack and then VAL2.
		Post-condition:	VAL1 & VAL2 removed from stack, replaced with 1(T) or 0(F).
00 10 06 10	Start-script
		A call to this function will start a  new function, terminating all activity in the current
		function permanently.
		Stack:		<Parameter1>		Stack:		<Empty>
				<ParameterN>
		Post Data:	<Function #>
				<Number Of Parameters>
00 10 07 10	Explode
		Explodes the object with a type of explosion
		Pre-condition:	TYPE on Stack, command followed by an object number.
		Post-condition:	Type gone from stack, object explodes.
00 20 00 10	Turn Object
		Causes an object to turn on an axis, at a speed, to a direction
		Stack:		<Speed>		Stack:		<Empty>
				<Direction>
		Post Data:	<Object #>
				<Axis #>
00 20 01 10	Wait-for-move
		Wait for an object to complete it's move.
		Stack:		<Empty>		Stack:		<Empty>
		Post Data:	<Object #>
				<Axis #>
00 20 02 10	Create local variable
		Creates a dword sized placeholder in the local variable space, this command is called for both
		incoming function parameters, as well as Var statements.  The parameters are created first 
		then the variables.
		Pre-condition: 	None
		Post-condition: 	None
00 20 03 10	-	
		Subtract <VAL2> from <VAL1>
		Stack:		<VAL1>		Stack:	<Answer>
				<VAL2>
		Post Data: 	<None>
00 20 04 10	Get value from port
		A call to this function will return the value that is stored in the port number stored on the
		stack.
		Pre-condition:	The number of the port to check has been placed on the stack.
		Post-condition:	The port number is removed from stack, replaced by the value stored in that
		port.
00 20 05 10	VAL1 <= VAL2
		Does less than or equal to comparison.	
		Pre-condition:	VAL1 is on stack followed by VAL2.
		Post-condition:	Both numbers are gone and replaced with result.  T - 1    F - 0
00 30 00 10	Spin Object
		Causes an object to spin at a speed, on an axis.
		Pre-condition:	Speed is on the stack, The Object # follows the command, and is followed by
		the Axis #. (0-x 1-y 2-z)
		Post-condition:	The object is spinning and the speed is removed from the stack.
00 30 01 10	Sleep
		Cause a unit to delay in execution.
		Stack:		<Length>		Stack:		<Empty>
		Post Data:	<None>
00 30 03 10	Multiply
		A call to this function multiplies two numbers.
		Stack:		<VAL1>		Stack:		<Answer>
				<VAL2>
		Post Data:	<None>
00 30 06 10	Call-script
		A call to this function will call a function, returning to the execution point after completion.
		Pre-condition:	Stack holds the parameters to pass, command is followed by the number of
		 the function to call (1st is 0), the function number is followed by the number of parameters to
		pass.
		Post-condition:	Script execution begins in new function,  all parameters are removed from
		the stack.
00 40 06 10	Jump
		A call to this function will  cause code execution to continue at the destination relative to the
		code block start.
		Pre-condition:	Value following command is the address to jump to relative to the start of
		the code block.
		Post-condition:	Code execution continues at new location.
00 50 00 10 	Show Object
		Shows an object after it has been hidden
		Stack:		<Empty>		Stack:		<Empty>
		Post Data:	<Object #>	
00 50 05 10	==
		Do a binary compare of two values.
		Pre-condition:	The two values to compare are on the stack.
		Post-condition:	The two values are removed and replaced with 1 for T or 0 for F.
00 50 06 10	Return from function
		A call to this function will exit the function with the return value that is on the stack.
		Pre-condition:	The value to return has been placed on the stack.
		Post-condition: 	The function is exited with the return value removed from the stack.
00 60 05 10	!=
		VAL1 and VAL2 are checked to see if same.
		Pre-condition: VAL1 and VAL2 are on stack.
		Post-condition: Numbers are removed from stack, and replaced with 0-Diff 1-Same.
00 60 06 10	If
		Test value and  branch execution.  If <VAL1> does not equal 0 then the offset is ignored.
		If <VAL1> is anything else execution will continue at the location of the offset.
		Stack:	<VAL1>			Stack:		<Empty>
		Post Data:	<Offset>
00 60 00 10	Hide Object
		Hides an object
		Stack: 		<Empty>		Stack: 		<Empty>
		Post Data:	<Object #>
00 70 06 10	Signal
		Do not know
		Stack:		<Signal #>		Stack:		<Empty>
		Post Data: 	<None>
00 80 00 10	Don't-cache
		Turns graphic caching off
		Pre-condition: 	Value following command is number of object to effect.
		Post-condition:	The above object is no longer cached.
00 80 06 10	Set-Signal-Mask
		Do not know
		Stack:		<Signal #>		Stack:		<Empty>
		Post Data:	<None>
00 A0 05 10	NOT
		Dose a bitwise not of a Number
		Stack:		<VAL1>			Stack:		<NOT VAL1>
		Post Data:	<None>
00 E0 00 10	Don't-shade
		Turns graphic shading off
		Pre-condition:	Value following command is number of object to effect.
		Post-condition:	The above object is no longer shaded.
00 F0 00 10	Emit-SFX
		A call to this will cause an object to emit smoke.
		Pre-condition:	The stack contains the kind of smoke to emit.
		Post-condition:  	The smoke type is removed from the stack and the unit is smoking.
01 10 02 10	Put Constant dword onto stack
		A call to this function will put the dword following the command onto the data stack.
		Pre-condition: 	Command is followed by dword constant to place on stack.
		Post-condition:	The dword value is now at the top of the stack.
02 10 02 10	Put local var onto stack
		A call to this function will place the value of a variable onto the stack.
		Stack:		<Empty>		Stack: 	<Value Of Var>
		Post Data:	<Var #>
02 30 02 10	Set local var to value
		Sets the local variable to a value.
		Pre-condition:	Value is on stack.  Command followed by variable number.
		Post-condition:	Local variable is equal to the number on the stack, the number is removed
		from the stack.
04 10 02 10	Put Static Var on Stack
		Will put the given static var onto the stack.
		Pre-condition:	Command is followed by static var number.
		Post-condition:	Stack contains value of the var number specified.
04 30 02 10	Set a static-var equal to a value
		A call to this function will set the static-variable supplied equal to a constant value
		Pre-condition:	Stack holds the number to be assigned to the static-var, the number
		following the command, holds the number of the static-variable to change.
		Post-condition:	The static-var is now set to the value, and the value has been removed from
		the stack.
10 60 03 10	Bitwise OR
		Dose a Bitwise or with two numbers.
		Pre-condition:	VAL1 and VAL2 on stack.
		Post-condition:	Numbers are removed and replaced with the result.